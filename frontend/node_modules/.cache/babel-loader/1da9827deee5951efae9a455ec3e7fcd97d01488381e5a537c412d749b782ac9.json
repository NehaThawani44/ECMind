{"ast":null,"code":"var _jsxFileName = \"/Users/nehathawani/Downloads/management/frontend/src/components/PdfManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PdfManager() {\n  _s();\n  const navigate = useNavigate();\n  const [pdfs, setPdfs] = useState([]);\n  const fileInputRef = useRef(null);\n  const goBack = () => {\n    navigate(\"/\");\n  };\n\n  // 1. Fetch existing PDF data from the server\n  useEffect(() => {\n    // Example GET request to fetch the list of PDFs from your Node backend\n    fetch(\"/api/pdfs\").then(res => res.json()).then(data => {\n      // data could be an array of { id, name, url } or however your backend returns it\n      setPdfs(data);\n    }).catch(err => console.error(\"Error fetching PDFs:\", err));\n  }, []);\n\n  // 2. Handle the \"Add New File\" button\n  const handleAddFileClick = () => {\n    // Programmatically open a hidden file input\n    fileInputRef.current.click();\n  };\n\n  // 3. Handle file input change (uploading the PDF)\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    // Send the PDF to the server using a FormData POST\n    const formData = new FormData();\n    formData.append(\"pdf\", file);\n    fetch(\"/upload\", {\n      method: \"POST\",\n      body: formData\n    }).then(res => res.json()).then(uploaded => {\n      console.log(\"Upload success:\", uploaded);\n      // Example: add the new PDF to state if your server returns the file’s info\n      setPdfs(prev => [...prev, {\n        id: uploaded.fileId,\n        // or whatever unique ID your server returns\n        name: file.name,\n        url: `/uploads/${uploaded.fileId}` // or some URL to access the PDF\n      }]);\n    }).catch(err => {\n      console.error(\"Error uploading file:\", err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"PDF Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goBack,\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddFileClick,\n      children: \"Add New File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"application/pdf\",\n      ref: fileInputRef,\n      style: {\n        display: \"none\"\n      },\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Uploaded PDFs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), pdfs.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No PDFs uploaded yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: pdfs.map(pdf => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: pdf.url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: pdf.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this)\n      }, pdf.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(PdfManager, \"htYcCB9Ce12k/9AHnaLRCjgf3bU=\", false, function () {\n  return [useNavigate];\n});\n_c = PdfManager;\nexport default PdfManager;\nvar _c;\n$RefreshReg$(_c, \"PdfManager\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","jsxDEV","_jsxDEV","PdfManager","_s","navigate","pdfs","setPdfs","fileInputRef","goBack","fetch","then","res","json","data","catch","err","console","error","handleAddFileClick","current","click","handleFileChange","event","file","target","files","formData","FormData","append","method","body","uploaded","log","prev","id","fileId","name","url","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","accept","ref","style","display","onChange","length","map","pdf","href","rel","_c","$RefreshReg$"],"sources":["/Users/nehathawani/Downloads/management/frontend/src/components/PdfManager.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction PdfManager() {\n  const navigate = useNavigate();\n  const [pdfs, setPdfs] = useState([]);\n  const fileInputRef = useRef(null);\n\n  const goBack = () => {\n    navigate(\"/\");\n  };\n\n  // 1. Fetch existing PDF data from the server\n  useEffect(() => {\n    // Example GET request to fetch the list of PDFs from your Node backend\n    fetch(\"/api/pdfs\")\n      .then((res) => res.json())\n      .then((data) => {\n        // data could be an array of { id, name, url } or however your backend returns it\n        setPdfs(data);\n      })\n      .catch((err) => console.error(\"Error fetching PDFs:\", err));\n  }, []);\n\n  // 2. Handle the \"Add New File\" button\n  const handleAddFileClick = () => {\n    // Programmatically open a hidden file input\n    fileInputRef.current.click();\n  };\n\n  // 3. Handle file input change (uploading the PDF)\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    // Send the PDF to the server using a FormData POST\n    const formData = new FormData();\n    formData.append(\"pdf\", file);\n\n    fetch(\"/upload\", {\n      method: \"POST\",\n      body: formData,\n    })\n      .then((res) => res.json())\n      .then((uploaded) => {\n        console.log(\"Upload success:\", uploaded);\n        // Example: add the new PDF to state if your server returns the file’s info\n        setPdfs((prev) => [\n          ...prev,\n          {\n            id: uploaded.fileId, // or whatever unique ID your server returns\n            name: file.name,\n            url: `/uploads/${uploaded.fileId}`, // or some URL to access the PDF\n          },\n        ]);\n      })\n      .catch((err) => {\n        console.error(\"Error uploading file:\", err);\n      });\n  };\n\n  return (\n    <div>\n      <h1>PDF Manager</h1>\n      <button onClick={goBack}>Go Back</button>\n\n      <button onClick={handleAddFileClick}>Add New File</button>\n      {/* Hidden file input */}\n      <input\n        type=\"file\"\n        accept=\"application/pdf\"\n        ref={fileInputRef}\n        style={{ display: \"none\" }}\n        onChange={handleFileChange}\n      />\n\n      <hr />\n\n      <h2>Uploaded PDFs</h2>\n      {pdfs.length === 0 ? (\n        <p>No PDFs uploaded yet.</p>\n      ) : (\n        <ul>\n          {pdfs.map((pdf) => (\n            <li key={pdf.id}>\n              {/*\n                You can either link to the PDF or embed it.\n                If your server hosts the file at a public URL (pdf.url),\n                you can do something like:\n              */}\n              <a href={pdf.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                {pdf.name}\n              </a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default PdfManager;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMW,YAAY,GAAGT,MAAM,CAAC,IAAI,CAAC;EAEjC,MAAMU,MAAM,GAAGA,CAAA,KAAM;IACnBJ,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;;EAED;EACAP,SAAS,CAAC,MAAM;IACd;IACAY,KAAK,CAAC,WAAW,CAAC,CACfC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACd;MACAP,OAAO,CAACO,IAAI,CAAC;IACf,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC,CAAC;EAC/D,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,kBAAkB,GAAGA,CAAA,KAAM;IAC/B;IACAX,YAAY,CAACY,OAAO,CAACC,KAAK,CAAC,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAI,CAACF,IAAI,EAAE;;IAEX;IACA,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,KAAK,EAAEL,IAAI,CAAC;IAE5Bd,KAAK,CAAC,SAAS,EAAE;MACfoB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEJ;IACR,CAAC,CAAC,CACChB,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEqB,QAAQ,IAAK;MAClBf,OAAO,CAACgB,GAAG,CAAC,iBAAiB,EAAED,QAAQ,CAAC;MACxC;MACAzB,OAAO,CAAE2B,IAAI,IAAK,CAChB,GAAGA,IAAI,EACP;QACEC,EAAE,EAAEH,QAAQ,CAACI,MAAM;QAAE;QACrBC,IAAI,EAAEb,IAAI,CAACa,IAAI;QACfC,GAAG,EAAE,YAAYN,QAAQ,CAACI,MAAM,EAAE,CAAE;MACtC,CAAC,CACF,CAAC;IACJ,CAAC,CAAC,CACDrB,KAAK,CAAEC,GAAG,IAAK;MACdC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC;IAC7C,CAAC,CAAC;EACN,CAAC;EAED,oBACEd,OAAA;IAAAqC,QAAA,gBACErC,OAAA;MAAAqC,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBzC,OAAA;MAAQ0C,OAAO,EAAEnC,MAAO;MAAA8B,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAEzCzC,OAAA;MAAQ0C,OAAO,EAAEzB,kBAAmB;MAAAoB,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAE1DzC,OAAA;MACE2C,IAAI,EAAC,MAAM;MACXC,MAAM,EAAC,iBAAiB;MACxBC,GAAG,EAAEvC,YAAa;MAClBwC,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAO,CAAE;MAC3BC,QAAQ,EAAE5B;IAAiB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eAEFzC,OAAA;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAENzC,OAAA;MAAAqC,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBrC,IAAI,CAAC6C,MAAM,KAAK,CAAC,gBAChBjD,OAAA;MAAAqC,QAAA,EAAG;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAE5BzC,OAAA;MAAAqC,QAAA,EACGjC,IAAI,CAAC8C,GAAG,CAAEC,GAAG,iBACZnD,OAAA;QAAAqC,QAAA,eAMErC,OAAA;UAAGoD,IAAI,EAAED,GAAG,CAACf,GAAI;UAACb,MAAM,EAAC,QAAQ;UAAC8B,GAAG,EAAC,qBAAqB;UAAAhB,QAAA,EACxDc,GAAG,CAAChB;QAAI;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR;MAAC,GARGU,GAAG,CAAClB,EAAE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASX,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACvC,EAAA,CAhGQD,UAAU;EAAA,QACAH,WAAW;AAAA;AAAAwD,EAAA,GADrBrD,UAAU;AAkGnB,eAAeA,UAAU;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}