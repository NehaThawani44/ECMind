{"ast":null,"code":"var _jsxFileName = \"/Users/nehathawani/Downloads/management/frontend/src/components/PdfManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PdfManager() {\n  _s();\n  const navigate = useNavigate();\n  const [pdfs, setPdfs] = useState([]);\n  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadError, setUploadError] = useState(null);\n  const goBack = () => {\n    navigate(\"/\");\n  };\n\n  // Fetch existing PDF data from the server\n  useEffect(() => {\n    fetch(\"/api/pdfs\").then(res => res.json()).then(data => {\n      setPdfs(data);\n    }).catch(err => console.error(\"Error fetching PDFs:\", err));\n  }, []);\n\n  // Open the upload dialog\n  const handleOpenUploadDialog = () => {\n    setSelectedFile(null); // Reset any previous file selection\n    setUploadError(null);\n    setUploadDialogOpen(true);\n  };\n\n  // Close the dialog\n  const handleCloseUploadDialog = () => {\n    setUploadDialogOpen(false);\n  };\n\n  // Handle file selection within the dialog\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (file && file.type === \"application/pdf\") {\n      setSelectedFile(file);\n    } else {\n      setUploadError(\"Please select a valid PDF file.\");\n    }\n  };\n\n  // Handle the actual file upload\n  const handleUpload = () => {\n    if (!selectedFile) {\n      setUploadError(\"No file selected.\");\n      return;\n    }\n    setUploading(true);\n    setUploadError(null);\n    const formData = new FormData();\n    formData.append(\"pdf\", selectedFile);\n    fetch(\"/upload\", {\n      method: \"POST\",\n      body: formData\n    }).then(res => res.json()).then(uploaded => {\n      // Update the PDF list with the new file's information\n      setPdfs(prev => [...prev, {\n        id: uploaded.fileId,\n        // Update based on your server's response\n        name: selectedFile.name,\n        url: `/uploads/${uploaded.fileId}` // Adjust URL as needed\n      }]);\n      setUploading(false);\n      setUploadDialogOpen(false);\n    }).catch(err => {\n      console.error(\"Error uploading file:\", err);\n      setUploadError(\"Error uploading file.\");\n      setUploading(false);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"PDF Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goBack,\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenUploadDialog,\n      children: \"Add New File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: uploadDialogOpen,\n      onClose: handleCloseUploadDialog,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Upload PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"application/pdf\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), uploadError && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"red\"\n          },\n          children: uploadError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseUploadDialog,\n          disabled: uploading,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleUpload,\n          disabled: uploading || !selectedFile,\n          children: uploading ? \"Uploading...\" : \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Uploaded PDFs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), pdfs.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No PDFs uploaded yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: pdfs.map(pdf => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: pdf.url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: pdf.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this)\n      }, pdf.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(PdfManager, \"hAebIjo8wQx466KF7lD5gYHqoV4=\", false, function () {\n  return [useNavigate];\n});\n_c = PdfManager;\nexport default PdfManager;\nvar _c;\n$RefreshReg$(_c, \"PdfManager\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Dialog","DialogTitle","DialogContent","DialogActions","Button","jsxDEV","_jsxDEV","PdfManager","_s","navigate","pdfs","setPdfs","uploadDialogOpen","setUploadDialogOpen","selectedFile","setSelectedFile","uploading","setUploading","uploadError","setUploadError","goBack","fetch","then","res","json","data","catch","err","console","error","handleOpenUploadDialog","handleCloseUploadDialog","handleFileChange","event","file","target","files","type","handleUpload","formData","FormData","append","method","body","uploaded","prev","id","fileId","name","url","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","open","onClose","accept","onChange","style","color","disabled","length","map","pdf","href","rel","_c","$RefreshReg$"],"sources":["/Users/nehathawani/Downloads/management/frontend/src/components/PdfManager.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from \"@mui/material\";\n\nfunction PdfManager() {\n  const navigate = useNavigate();\n  const [pdfs, setPdfs] = useState([]);\n  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadError, setUploadError] = useState(null);\n\n  const goBack = () => {\n    navigate(\"/\");\n  };\n\n  // Fetch existing PDF data from the server\n  useEffect(() => {\n    fetch(\"/api/pdfs\")\n      .then((res) => res.json())\n      .then((data) => {\n        setPdfs(data);\n      })\n      .catch((err) => console.error(\"Error fetching PDFs:\", err));\n  }, []);\n\n  // Open the upload dialog\n  const handleOpenUploadDialog = () => {\n    setSelectedFile(null); // Reset any previous file selection\n    setUploadError(null);\n    setUploadDialogOpen(true);\n  };\n\n  // Close the dialog\n  const handleCloseUploadDialog = () => {\n    setUploadDialogOpen(false);\n  };\n\n  // Handle file selection within the dialog\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    if (file && file.type === \"application/pdf\") {\n      setSelectedFile(file);\n    } else {\n      setUploadError(\"Please select a valid PDF file.\");\n    }\n  };\n\n  // Handle the actual file upload\n  const handleUpload = () => {\n    if (!selectedFile) {\n      setUploadError(\"No file selected.\");\n      return;\n    }\n    setUploading(true);\n    setUploadError(null);\n\n    const formData = new FormData();\n    formData.append(\"pdf\", selectedFile);\n\n    fetch(\"/upload\", {\n      method: \"POST\",\n      body: formData,\n    })\n      .then((res) => res.json())\n      .then((uploaded) => {\n        // Update the PDF list with the new file's information\n        setPdfs((prev) => [\n          ...prev,\n          {\n            id: uploaded.fileId, // Update based on your server's response\n            name: selectedFile.name,\n            url: `/uploads/${uploaded.fileId}`, // Adjust URL as needed\n          },\n        ]);\n        setUploading(false);\n        setUploadDialogOpen(false);\n      })\n      .catch((err) => {\n        console.error(\"Error uploading file:\", err);\n        setUploadError(\"Error uploading file.\");\n        setUploading(false);\n      });\n  };\n\n  return (\n    <div>\n      <h1>PDF Manager</h1>\n      <button onClick={goBack}>Go Back</button>\n\n      <button onClick={handleOpenUploadDialog}>Add New File</button>\n\n      {/* Upload Dialog */}\n      <Dialog open={uploadDialogOpen} onClose={handleCloseUploadDialog}>\n        <DialogTitle>Upload PDF</DialogTitle>\n        <DialogContent>\n          <input\n            type=\"file\"\n            accept=\"application/pdf\"\n            onChange={handleFileChange}\n          />\n          {uploadError && <p style={{ color: \"red\" }}>{uploadError}</p>}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseUploadDialog} disabled={uploading}>\n            Cancel\n          </Button>\n          <Button onClick={handleUpload} disabled={uploading || !selectedFile}>\n            {uploading ? \"Uploading...\" : \"Upload\"}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <hr />\n\n      <h2>Uploaded PDFs</h2>\n      {pdfs.length === 0 ? (\n        <p>No PDFs uploaded yet.</p>\n      ) : (\n        <ul>\n          {pdfs.map((pdf) => (\n            <li key={pdf.id}>\n              <a href={pdf.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                {pdf.name}\n              </a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default PdfManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}